#!/usr/bin/env python3
# use from a venv that has the `requests` module installed.

import json
import os
import sys
import rwt.wikiapi as wiki

IMAGE_EXTS = wiki.image_extensions()

def gather_credentials(fname):
    """Get credentials from a json file"""
    with open(fname, "r") as read_file:
        data = json.load(read_file)
    if not set(data.keys()).issuperset({'uname','pw','url'}):
        raise SystemExit('Credentials must have "url", "uname", and "pw" entries!')
    return data

def check_response(response):
    if response.status_code < 200 or response.status_code >= 300:
        print("Response:", response, sep="\n", file=sys.stderr)
        raise SystemExit(f"Bad request response of {response.status_code}!")

def perform_uploads(session, files, comment):
    """Upload the `files` to the mediawiki pointed to by `creds`"""
    for file in files:
        basename = os.path.basename(file)
        _, ext = os.path.splitext(basename)
        expanded_comment = comment.replace('{}',basename)
        if ext.lower() in IMAGE_EXTS:
            check_response(session.upload_from_file(file, expanded_comment))
        else:
            check_response(session.edit_from_file(file, expanded_comment))
        print(file)  # print a running list of files, which makes it easy to remove them if needed

def perform_download(session, title: str, as_html):
    """Download from the logged in WikiSession"""
    if as_html:
        ext = 'html'
        resp, text = session.fetch_html(title)
    else:
        ext = 'wikitext'
        resp, text = session.fetch_wikitext(title)
    check_response(resp)
    with open(f"{title.replace(' ','_')}.{ext}", 'w') as outf:
        outf.write(text)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Upload files to a mediawiki")
    parser.add_argument('-c','--credentials', type=str, default="un_pw.json", help="A JSON file of credentials (default: un_pw.json)")
    parser.add_argument('--example-creds', action="store_true", help="write an example JSON credentials file to stdout")
    parser.add_argument('-s','--summary', type=str, default="Uploaded file {}", help="A summary comment to use for the files. {} == filename")
    parser.add_argument('-f','--fetch', metavar='TITLE', type=str, help="Fetch an article")
    parser.add_argument('--html', action="store_true", help="Fetch as html instead of wikitext")
    parser.add_argument('filename', type=str, default=None, nargs='*')

    args = parser.parse_args()
    if(args.example_creds):
        print("""# example credentials .json:
{
   "url": "https:/blah/api.php",
   "uname": "username",
   "pw": "password"
}""")
        exit(1)
    creds = gather_credentials(args.credentials)
    with wiki.WikiSession(creds['url']) as ws:
        check_response(ws.login(creds['uname'], creds['pw']))
        if args.fetch:
            perform_download(ws, args.fetch, args.html)
        if args.filename:
            perform_uploads(ws, args.filename, args.summary)

# vim: ft=python
